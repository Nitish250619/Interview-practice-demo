[
  {
    "id": "js-basics-1",
    "title": "JavaScript Basics 1",
    "category": "Programming",
    "topic": "Variables & Data Types",
    "totalQuestions": 10,
    "questions": [
      {
        "question": "What is the correct way to declare a variable in JavaScript?",
        "options": ["var x;", "x = var;", "let x;", "int x;"],
        "answer": "let x;"
      },
      {
        "question": "Which of these is a primitive data type in JavaScript?",
        "options": ["Object", "Array", "String", "Function"],
        "answer": "String"
      },
      {
        "question": "What will the following code output: console.log(0 == false)?",
        "options": ["true", "false", "undefined", "null"],
        "answer": "true"
      },
      {
        "question": "Which of the following is NOT a data type in JavaScript?",
        "options": ["Boolean", "Number", "String", "Decimal"],
        "answer": "Decimal"
      },
      {
        "question": "What is the value of 'NaN' in JavaScript?",
        "options": ["Not a Number", "Null", "Undefined", "A string"],
        "answer": "Not a Number"
      },
      {
        "question": "How do you create a constant in JavaScript?",
        "options": ["const x;", "let x;", "var x;", "constant x;"],
        "answer": "const x;"
      },
      {
        "question": "Which method is used to remove the last item from an array?",
        "options": ["pop()", "shift()", "slice()", "delete()"],
        "answer": "pop()"
      },
      {
        "question": "Which of the following is a correct way to declare a function in JavaScript?",
        "options": [
          "function myFunction()",
          "def myFunction()",
          "func myFunction()",
          "function: myFunction()"
        ],
        "answer": "function myFunction()"
      },
      {
        "question": "Which of these is NOT a valid variable name in JavaScript?",
        "options": ["myVar", "_var", "var1", "1var"],
        "answer": "1var"
      },
      {
        "question": "What does 'typeof' operator do in JavaScript?",
        "options": [
          "Returns the data type of a variable",
          "Assigns a data type to a variable",
          "Declares a variable",
          "Prints the value of a variable"
        ],
        "answer": "Returns the data type of a variable"
      }
    ]
  },
  {
    "id": "js-intermediate-1",
    "title": "JavaScript Intermediate 1",
    "category": "Programming",
    "topic": "Promises & Async/Await",
    "totalQuestions": 12,
    "questions": [
      {
        "question": "What is a Promise in JavaScript?",
        "options": [
          "An object representing the future result of an asynchronous operation",
          "A type of variable",
          "A function that returns a value",
          "A loop for asynchronous code"
        ],
        "answer": "An object representing the future result of an asynchronous operation"
      },
      {
        "question": "How do you handle a Promise rejection?",
        "options": [".catch()", ".then()", ".finally()", "None of the above"],
        "answer": ".catch()"
      },
      {
        "question": "What does async/await allow in JavaScript?",
        "options": [
          "Asynchronous code to be written in a synchronous style",
          "Synchronous code to be written asynchronously",
          "Handling errors in a synchronous manner",
          "All of the above"
        ],
        "answer": "Asynchronous code to be written in a synchronous style"
      },
      {
        "question": "Which method is used to execute a Promise when it resolves?",
        "options": [".then()", ".resolve()", ".catch()", ".await()"],
        "answer": ".then()"
      },
      {
        "question": "What is the purpose of 'await' in JavaScript?",
        "options": [
          "To pause execution until a Promise resolves",
          "To create a Promise",
          "To reject a Promise",
          "To execute synchronous code asynchronously"
        ],
        "answer": "To pause execution until a Promise resolves"
      },
      {
        "question": "Which of these statements is true about async functions?",
        "options": [
          "They always return a Promise",
          "They return a value directly",
          "They do not handle asynchronous code",
          "They cannot be awaited"
        ],
        "answer": "They always return a Promise"
      },
      {
        "question": "What does the '.finally()' method do?",
        "options": [
          "Executes code after a Promise resolves or rejects",
          "Executes code only when a Promise rejects",
          "Executes code only when a Promise resolves",
          "None of the above"
        ],
        "answer": "Executes code after a Promise resolves or rejects"
      },
      {
        "question": "Can you use 'await' inside a non-async function?",
        "options": [
          "No",
          "Yes, but it will not wait",
          "Yes, but it will be ignored",
          "Yes, and it will work fine"
        ],
        "answer": "No"
      },
      {
        "question": "What happens when a Promise is rejected?",
        "options": [
          "It triggers the catch block",
          "It triggers the then block",
          "It completes successfully",
          "None of the above"
        ],
        "answer": "It triggers the catch block"
      },
      {
        "question": "Which of the following is true about the 'then' method?",
        "options": [
          "It handles both resolved and rejected Promises",
          "It handles only resolved Promises",
          "It handles only rejected Promises",
          "It is used to create a Promise"
        ],
        "answer": "It handles only resolved Promises"
      },
      {
        "question": "Which of these methods can be used to handle multiple Promises in parallel?",
        "options": [".all()", ".race()", ".resolve()", ".then()"],
        "answer": ".all()"
      },
      {
        "question": "What does 'Promise.all()' do?",
        "options": [
          "Waits for all promises to resolve",
          "Resolves the first Promise that resolves",
          "Waits for the first Promise to resolve",
          "None of the above"
        ],
        "answer": "Waits for all promises to resolve"
      }
    ]
  }
]
